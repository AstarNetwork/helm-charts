---
# Source: ethereum-reth-nimbus/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: node
  labels:
    helm.sh/chart: ethereum-reth-nimbus-0.0.15
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
  serviceName: node
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
      annotations:
        karpenter.sh/do-not-disrupt: "true"
    spec:
      serviceAccountName: node
      securityContext:
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
      nodeSelector:
        karpenter.sh/nodepool: lvm-localpv
        node.kubernetes.io/instance-type: i3.4xlarge
      affinity:
        #* Don't run more than one on the same node
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                    - node
              topologyKey: kubernetes.io/hostname
      tolerations:
        - effect: NoSchedule
          key: lvm-localpv
          operator: Equal
          value: "true"
      topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              statefulsetname: node
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
      terminationGracePeriodSeconds: 90
      initContainers:

        - name: init-dirs
          image: alpine:latest
          env:
            - name: APP_HOME
              value: /data
          command:
            - sh
            - -exuc
            - |
              #* Generate the JWT secret key
              if [ ! -f $APP_HOME/jwt.txt ]; then
                apk add openssl
                openssl rand -hex 32 > $APP_HOME/jwt.txt
              fi

              if [ -d $APP_HOME/reth && -d $APP_HOME/nimbus ]; then
                mkdir -p $APP_HOME/reth $APP_HOME/nimbus
                chown -R 1001:1001 $APP_HOME
              fi
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: storage
              mountPath: /data

        - name: nimbus-trusted-sync
          image: alpine:latest
          env:
            - name: APP_HOME
              value: /data
          command:
            - sh
            - -exuc
            - |
              if [ -d $APP_HOME/nimbus/db ]; then
                #* if nimbus folder is empty state sync it manually 1st time
                #* see https://nimbus.guide/trusted-node-sync.html
                /home/user/nimbus_beacon_node \
                trustedNodeSync \
                  --network=sepolia \
                  --data-dir=$APP_HOME/nimbus \
                  --trusted-node-url=https://beaconstate-sepolia.chainsafe.io \
                  --reindex \
                  --backfill
              fi
          securityContext:
            runAsUser: 0
          volumeMounts:
            - name: storage
              mountPath: /data

        - name: create-p2p-service
          image: alpine/k8s:1.30.4
          env:
            - name: ARGOCD_INSTANCE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels["app.kubernetes.io/instance"]
          command:
            - /bin/sh
            - -exuc
            - |
              SVC_NAME=$HOSTNAME-p2p

              #* Delete LB service if exist
              kubectl -n default delete svc --wait=true $SVC_NAME || true

              TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
              CURRENT_AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone)
              SUBNET_NAME="AWS-Subnet-Prefix-$CURRENT_AZ"

              ORDINAL=$(echo $HOSTNAME|grep -Eo '[0-9]+$')
              #* Create LB service to expose p2p
              EIP_ID=$(echo '[]' | jq -r '.['$ORDINAL']'|cut -d: -f1| xargs)
              EXTERNAL_IP=$(echo '[]' | jq -r '.['$ORDINAL']' |cut -d: -f2| xargs)

              SVC_YAML=$(mktemp)
              cat >$SVC_YAML <<EOF
              apiVersion: v1
              kind: Service
              metadata:
                name: $SVC_NAME
                labels:
                  argocd.argoproj.io/instance: $ARGOCD_INSTANCE_NAME
                  app.kubernetes.io/instance: $ARGOCD_INSTANCE_NAME
                  app.kubernetes.io/part-of: argocd
                annotations:
                  argocd.argoproj.io/compare-options: IgnoreExtraneous
                  argocd.argoproj.io/sync-options: Prune=false
                  service.beta.kubernetes.io/aws-load-balancer-name: $ARGOCD_INSTANCE_NAME}-${HOSTNAME
                  service.beta.kubernetes.io/aws-load-balancer-scheme: internet-facing
                  service.beta.kubernetes.io/aws-load-balancer-type: external
                  service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: ip
                  service.beta.kubernetes.io/aws-load-balancer-eip-allocations: $EIP_ID
                  service.beta.kubernetes.io/aws-load-balancer-subnets: $SUBNET_NAME
                  service.beta.kubernetes.io/aws-load-balancer-target-group-attributes: preserve_client_ip.enabled=true
                  service.beta.kubernetes.io/aws-load-balancer-security-groups: AWS-Security-Group
                  service.beta.kubernetes.io/aws-load-balancer-manage-backend-security-group-rules: "false"
                  service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: http
                  service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "8545"
                  service.beta.kubernetes.io/aws-load-balancer-healthcheck-success-codes: "200-499"      #!Don't care what the code is, just need to be 200-499
              spec:
                selector:
                  statefulset.kubernetes.io/pod-name: $HOSTNAME
                loadBalancerClass: service.k8s.aws/nlb
                type: LoadBalancer
                externalTrafficPolicy: Local
                publishNotReadyAddresses: true
                ports:
                  - name: eth1-p2p
                    targetPort: eth1-p2p
                    port: 30303
                    protocol: TCP
                  - name: eth1-discovery
                    targetPort: eth1-discovery
                    port: 30304
                    protocol: UDP
                  - name: eth2-p2p
                    targetPort: eth2-p2p
                    port: 9222
                    protocol: TCP
                  - name: eth2-discovery
                    targetPort: eth2-discovery
                    port: 9223
                    protocol: UDP
              EOF

              cat $SVC_YAML
              kubectl -n default apply -f $SVC_YAML

              kubectl annotate pod $HOSTNAME external-ip=$EXTERNAL_IP --overwrite;
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001

        - name: replicas-peering
          image: alpine/k8s:1.30.4
          command:
            - sh
            - -exuc
            - |
              #* Get enodes of its replicas to peer with
              RETH_TRUSTED_PEERS=$(curl -s -X POST -H "Content-Type: application/json" \
                      --data '{"jsonrpc":"2.0","method":"admin_nodeInfo","params":[],"id":1}' \
                      "http://node-[0-1].node:8545" | jq -r .result.enode | paste -sd ",")

              #* Annotate the pod with static peers info, to have it in ENV var in the container
              kubectl annotate pod $HOSTNAME reth-trusted-peers=$RETH_TRUSTED_PEERS --overwrite;
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
      containers:
        - name: reth
          image: ghcr.io/paradigmxyz/reth:v1.3.12
          imagePullPolicy: IfNotPresent
          env:
            - name: EXTERNAL_IP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['external-ip']
            - name: RETH_TRUSTED_PEERS
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['reth-trusted-peers']
            - name: APP_HOME
              value: "/data"
          command:
            # - sleep
            # - "10000000000000"
            - reth
            - node
            - --chain=sepolia
            - --datadir=$(APP_HOME)/reth
            - --http
            - --http.addr=0.0.0.0
            - --http.port=8545
            - --http.api=admin,debug,eth,net,trace,txpool,web3,rpc,reth,ots
            - --http.corsdomain=*
            - --ws
            - --ws.addr=0.0.0.0
            - --ws.port=8546
            - --ws.origins=*
            - --ws.api=admin,debug,eth,net,trace,txpool,web3,rpc,reth,ots
            - --authrpc.jwtsecret=$(APP_HOME)/jwt.txt
            - --authrpc.addr=0.0.0.0
            - --authrpc.port=8551
            - --port=30303
            - --discovery.port=30304
            - --metrics=0.0.0.0:7300
            - --log.file.max-files=0
            - --nat=extip:$(EXTERNAL_IP)
            - --p2p-secret-key=$(APP_HOME)/reth_p2p_key_$(EXTERNAL_IP)
            - --trusted-peers=$(RETH_TRUSTED_PEERS)
          ports:
            - containerPort: 8545
              name: eth1-rpc
              protocol: TCP
            - containerPort: 8546
              name: eth1-ws
              protocol: TCP
            - containerPort: 30303
              name: eth1-p2p
              protocol: TCP
            - containerPort: 30304
              name: eth1-discovery
              protocol: UDP
            - containerPort: 7300
              name: eth1-metrics
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 8545
          resources:
            limits:
              memory: 24Gi
            requests:
              cpu: 2
              memory: 16Gi
          lifecycle:
            preStop:  #* To let it reply to all requests in process
              exec:
                command: ["/bin/sh", "-c", "sleep 60"]
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - name: storage
              mountPath: /data
        - name: nimbus
          image: statusim/nimbus-eth2:amd64-v25.4.0
          imagePullPolicy: IfNotPresent
          env:
            - name: EXTERNAL_IP
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['external-ip']
            - name: APP_HOME
              value: "/data"
          command:
            # - sleep
            # - "10000000000000"
            - /home/user/nimbus_beacon_node
            - --network=sepolia
            - --data-dir=$(APP_HOME)/nimbus
            - --el=http://localhost:8551
            - --jwt-secret=$(APP_HOME)/jwt.txt
            - --history=archive
            - --nat=extip:$(EXTERNAL_IP)
            - --tcp-port=9222
            - --udp-port=9223
            - --rest
            - --rest-port=9545
            - --rest-address=0.0.0.0
            - --rest-allow-origin=*
            - --metrics
            - --metrics-address=0.0.0.0
            - --metrics-port=7301
          ports:
            - containerPort: 9545
              name: eth2-rpc
              protocol: TCP
            - containerPort: 9222
              name: eth2-p2p
              protocol: TCP
            - containerPort: 9223
              name: eth2-discovery
              protocol: UDP
            - containerPort: 7301
              name: eth2-metrics
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9545
          resources:
            limits:
              memory: 12Gi
            requests:
              cpu: 1
              memory: 8Gi
          lifecycle:
            preStop:  #* To let it reply to all requests in process
              exec:
                command: ["/bin/sh", "-c", "sleep 60"]
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          volumeMounts:
            - name: storage
              mountPath: /data
        - name: ethereum-exporter
          image: ethpandaops/ethereum-metrics-exporter:0.27.1-debian
          imagePullPolicy: IfNotPresent
          command:
            # - sleep
            # - "10000000000000"
            - /bin/sh
            - -c
            - |
              sleep 30
              exec /ethereum-metrics-exporter \
                --consensus-url=http://localhost:9545 \
                --execution-url=http://localhost:8545 \
                --execution-modules="eth,net,web3,txpool" \  #! Remove admin, due to it failes with current reth
                --metrics-port=7302
          ports:
            - containerPort: 7302
              name: metrics
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 7302
          resources:
            limits:
              cpu: 500m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001

      volumes:
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "20Gi"
        storageClassName: lvm-localpv
